# Poetry
# https://python-poetry.org/docs/pyproject/

[tool.poetry]
name = "reactor"
version = "0.0.0"
description = "üë©üèª‚Äçüî¨ Research Activity Output Repository üöÄ Built on Django üêç"
license = "MIT"
authors = [
  "Kamil Paduszy≈Ñski <92403542+paduszyk@users.noreply.github.com>",
]
readme = "docs/README.md"
repository = "https://github.com/paduszyk/reactor"
packages = [
  { include = "reactor", from = "src" },
]

[tool.poetry.scripts]
"reactor-cli" = "reactor.cli:entry_point"

[tool.poetry.dependencies]
click = "^8.1.7"
dj-database-url = "^2.1.0"
django = { version = "^5.0", allow-prereleases = true }
django-configurations = { version = "^2.5", extras = ["database"] }
ipython = "^8.18.1"
python = "^3.11"
python-decouple = "^3.8"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "^4.2.0"
pre-commit = "^3.6.0"

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.8"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-click = "^1.1.0"
pytest-cov = "^4.1.0"
pytest-custom-exit-code = "^0.3.0"
pytest-django = "^4.7.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"

# Codespell
# https://github.com/codespell-project/codespell

[tool.codespell]
skip = "poetry.lock,package-lock.json"

# Ruff
# https://docs.astral.sh/ruff/configuration/
# https://docs.astral.sh/ruff/rules/
# https://docs.astral.sh/ruff/settings/

[tool.ruff]
target-version = "py311"
select = [
  "F",    # pyflakes
  "E",    # pycodestyle (errors)
  "W",    # pycodestyle (warnings)
  "I",    # isort
  "D",    # pydocstyle
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "T20",  # flake8-print
  "PTH",  # flake8-use-pathlib
]
ignore = ["E501", "D1", "D205"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "django",
  "first-party",
  "local-folder",
]
known-first-party = ["reactor"]

[tool.ruff.isort.sections]
"django" = ["django"]

# Pytest
# https://docs.pytest.org/en/latest/reference/reference.html#configuration-options

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "--strict-markers",

  # pytest-cov
  # https://pytest-cov.readthedocs.io/en/latest/config.html#reference
  "--cov",
  "--cov-branch",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=xml",

  # pytest-django
  # https://pytest-django.readthedocs.io/en/latest/configuring_django.html
  "--ds=reactor.conf.settings",
  "--dc=Tests",

  # pytest-custom-exit-code
  # https://github.com/yashtodi94/pytest-custom_exit_code#usage
  "--suppress-no-test-exit-code",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]
python_files = ["test_*.py", "tests.py"]
pythonpath = [".", "src"]
testpaths = ["tests"]

# Coverage.py
# https://coverage.readthedocs.io/en/latest/config.html

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
omit = [
  "**/conf/*",
  "**/__main__.py",
  "**/settings.py",
  "**/urls.py",
]
exclude_also = [
  "if __name__ == ['\"]__main__['\"]",
  "if settings.DEBUG:",
  "raise NotImplementedError",
]

[tool.coverage.xml]
output = "coverage.xml"
